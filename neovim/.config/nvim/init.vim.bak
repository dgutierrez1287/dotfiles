" leader 
let mapleader = ","

" line numbers
set number relativenumber

" general
filetype off
syntax on
set exrc
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set scrolloff=8

" spacing
set tabstop=2 softtabstop=2
set shiftwidth=2
set expandtab
set smartindent
set nowrap

" folds
set foldmethod=indent
set foldlevelstart=4

" splits
set splitbelow splitright

" adjusting splits
nnoremap <silent> <C-Right> :vertical resize +3<CR>
nnoremap <silent> <C-Left> :vertical resize -3<CR>
nnoremap <silent> <C-Up> :resize +3<CR>
nnoremap <silent> <C-Down> :resize -3<CR>

" newline without insert
nmap <C-o> O<Esc>j
nmap <CR> o<Esc>k

" open empty splits
nnoremap <C-s> :vnew<CR>
nnoremap <C-i> :new<CR>
" git remaps
nnoremap <C-p> :GFiles<CR>

" set column
set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

" pyenv environments for neovim
let g:python_host_prog = '/home/diego/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/home/diego/.pyenv/versions/neovim3/bin/python3'

" plugins install (configured in their own config file)
call plug#begin()

" file operations
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'junegunn/fzf', { 'build': './install --all', 'merged': 0 }
Plug 'junegunn/fzf.vim', { 'depends': 'fzf' } 

" git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" look and feel
Plug 'morhetz/gruvbox'
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" motion
Plug 'christoomey/vim-tmux-navigator'
Plug 'kshenoy/vim-signature'

" tools
Plug 'tpope/vim-surround'
Plug 'preservim/nerdcommenter'
Plug 'w0rp/ale'
Plug 'michaeljsmith/vim-indent-object'
Plug 'jiangmiao/auto-pairs'
Plug 'lambdalisue/vim-pyenv'
Plug 'junegunn/vim-slash'
Plug 'ekalinin/Dockerfile.vim'

" macros and snippets
Plug 'chamindra/marvim'

""" languages
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-compe'
Plug 'nvim-lua/completion-nvim'
Plug 'vim-syntastic/syntastic'
"Plug 'ycm-core/YouCompleteMe'
Plug 'neomake/neomake'

" terraform
Plug 'hashivim/vim-terraform'
Plug 'juliosueiras/vim-terraform-completion'

" Python
Plug 'nvie/vim-flake8'
"Plug 'neoclide/coc-python', {'do': 'yarn install --frozen-lockfile'}

" Go
"Plug 'neoclide/coc-go', {'do': 'yarn install --frozen-lockfile'}
Plug 'fatih/vim-go', {'do': ':GoUpdateBinaries'}

" bash
"Plug 'neoclide/coc-sh', {'do': 'yarn install --frozen-lockfile'}

" file types
"Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
"Plug 'neoclide/coc-yaml', {'do': 'yarn install --frozen-lockfile'}
"Plug 'neoclide/coc-xml', {'do': 'yarn install --frozen-lockfile'}

" snippets
Plug 'honza/vim-snippets'
Plug 'sebosp/vim-snippets-terraform'
Plug 'Sirver/ultisnips'

call plug#end()

" color scheme
colorscheme gruvbox
set background=dark

""" plugin config  

""coc
""let b:coc_suggest_disable = 1
"nmap <leader>gd <Plug>(coc-definition)
"nmap <leader>gr <Plug>(coc-references)

"" deoplete
"let g:deoplete#omni_patterns = {}

"call deoplete#custom#option('omni_patterns', {
      "\ 'complete_method': 'omnifunc',
      "\ 'terraform': '[^ *\t"{=$]\w*',
      "\})

"call deoplete#initialize()

" fzf
" Don't allow any default key-mappings.
let g:tmux_navigator_no_mappings = 1
"
" " Re-enable tmux_navigator.vim default bindings, minus <c-\>.
" <c-\> conflicts with NERDTree \"current file".
"
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

" git gutter
nmap <leader>gh <Plug>(GitGutterNextHunk)
nmap <leader>gH <Plug>(GitGutterPrevHunk)

" nerdtree
" open automatically
augroup nerdtree
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
augroup END

" toggle 
nnoremap <Leader>f :NERDTreeToggle<Enter>

" clean up buffers when delete file
let NERDTreeAutoDeleteBuffer = 1

" simplify the ui
let NERDTreeMinimalUI = 1

" closing nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" hidden files
let NERDTreeShowHidden = 1

let g:NERDTreeGitStatusUseNerdFonts = 1
let g:NERDTreeGitStatusShowIgnored = 1

" ultisnips
let g:UltiSnipsExpandTrigger="<C-p>"
let g:UltiSnipsJumpForwardTrigger="<S-j>"
let g:UltiSnipsJumpBackwardTrigger="<S-k>"

let g:UltiSnipsSnippetDirectories = ['UltiSnips']

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" syntastic 
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

let g:syntastic_terraform_tffilter_plan = 1

" tmux navigator
" Don't allow any default key-mappings.
let g:tmux_navigator_no_mappings = 1
"
" " Re-enable tmux_navigator.vim default bindings, minus <c-\>.
" <c-\> conflicts with NERDTree "current file".
"
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

" vim airline
" enable airline
let g:airline#extensions#tabline#enabled = 1

" powerline font
let g:airline_powerline_fonts = 1

" buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

" vim terraform
" Basic Config
let g:terraform_align=1
let g:terraform_fold_sections=0
let g:terraform_fmt_on_save=1

" AutoCompletion Config
let g:terraform_completion_keys = 1
let g:terraform_registry_module_completion = 0

""youcompleteme
"let g:ycm_complete_in_comments = 1 
"let g:ycm_seed_identifiers_with_syntax = 1 
"let g:ycm_collect_identifiers_from_comments_and_strings = 1 


"let g:ycm_use_ultisnips_completer = 1
"let g:ycm_key_list_select_completion = ['<TAB>']
"let g:ycm_key_list_previous_completion = ['<S-TAB>']
"let g:ycm_key_list_stop_completion = ['<C-y>', '<UP>', '<DOWN>']

"set completeopt=menuone,noinsert,noselect
"let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']

" wsl config
func! GetSelectedText()
	normal gv"xy
	let result = getreg("x")
	return result
endfunc
noremap <Leader>C :call system('clip.exe', GetSelectedText())<CR>
noremap <Leader>V :call system('clip.exe', GetSelectedText())<CR>gvx

" Languageservers
lua << EOF
  require'lspconfig'.gopls.setup{on_attach=require'completion'.on_attach}
EOF

augroup lsp_stuff
  autocmd!
  autocmd BufEnter * lua require'completion'.on_attach()
augroup END

"formatting
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+//e
  call winrestview(l:save)
endfun

augroup formatting_helpers
  autocmd!
  autocmd BufWritePre * :call TrimWhiteSpace()
augroup END


